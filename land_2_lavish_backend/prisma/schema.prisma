generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  userId       String    @unique
  email        String    @unique
  password     String
  role         Role
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String?
  addharCard   String?   @unique
  dob          DateTime? @map("dob")
  mobile       String?   @unique
  logs         Log[]
  createdBy    User?     @relation("UserCreations", fields: [createdById], references: [id])
  createdUsers User[]    @relation("UserCreations")
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Booking {
  booking_id   Int      @id @default(autoincrement())
  customer_id  String   @db.VarChar(50)
  booking_date DateTime @default(now())
  name         String   @db.VarChar(255)
  address      String
  property_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  customer     Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  property     Property @relation(fields: [property_id], references: [property_id], onDelete: Cascade)

  @@index([property_id])
  @@index([customer_id])
}

model Broker {
  broker_id           Int        @id @default(autoincrement())
  name                String
  address             String
  mobile              String?
  email               String?
  phone               String?
  fax                 String?
  income_tax_ward_no  String?
  dist_no             String?
  pan_no              String?
  net_commission_rate Float      @default(0.0)
  project_id          Int
  project_name        String
  project             Project    @relation(fields: [project_id], references: [project_id])
  customers           Customer[]
  associated_projects Project[]  @relation("ProjectBrokers")
}

model CoApplicant {
  co_applicant_id    Int       @id @default(autoincrement())
  customer_id        String
  is_applicant       Boolean   @default(false)
  name               String
  guardian_name      String?
  address            String
  mobile             String?   @unique
  email              String?   @unique
  phone              String?
  fax                String?
  occupation         String?
  income_tax_ward_no String?
  dist_no            String?
  pan_no             String?   @unique
  dob                DateTime?
  nationality        String    @default("Resident Indian")
  customer           Customer  @relation(fields: [customer_id], references: [customer_id])
}

model Customer {
  customer_id         String             @id
  broker_id           Int?
  property_type       String?
  booking_receipt_no  String?
  name                String
  father_husband_name String?
  grandfather_name    String?
  allottee_dob        DateTime?          @map("dob")
  permanent_address   String
  full_postal_address String?
  city                String?
  state               String?
  pincode             String?
  country             String             @default("India")
  email               String?            @unique
  mobile              String             @unique
  std_isd_code        String?
  phone               String?
  fax                 String?
  income_tax_ward_no  String?
  dist_no             String?
  pan_no              String?            @unique
  aadhar_no           String?            @unique
  gstin               String?
  paid_100_percent    Boolean            @default(false)
  nominee_name        String?
  nominee_address     String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  project_id          Int
  bookings            Booking[]
  co_applicants       CoApplicant[]
  broker              Broker?            @relation(fields: [broker_id], references: [broker_id])
  project             Project            @relation(fields: [project_id], references: [project_id])
  properties          Property[]
  registration_forms  RegistrationForm[]

  @@index([project_id])
  @@index([broker_id])
}

model InstallmentPlan {
  no_of_installments  Int
  plan_name           String               @id @unique
  installment_details InstallmentDetails[]
  projects            Project[]
}

model InstallmentDetails {
  detail_id          Int             @id @default(autoincrement())
  plan_name          String
  installment_number Int
  amount             Decimal
  percentage         Decimal
  due_after_days     Int
  due_date           DateTime
  installment_plan   InstallmentPlan @relation(fields: [plan_name], references: [plan_name])
}

model LeanBank {
  id          Int      @id @default(autoincrement())
  bank_name   String
  ifsc_code   String   @unique
  bank_branch String
  created_at  DateTime @default(now())
}

model Plc {
  plc_id        Int      @id @default(autoincrement())
  plc_name      String   @unique
  value         Float
  is_percentage Boolean  @default(false)
  remarks       String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model Project {
  company_name       String
  address            String
  landmark           String?
  plan               String
  project_name       String             @unique
  sign_img           String?
  project_id         Int                @id @default(autoincrement())
  brokers            Broker[]
  customers          Customer[]
  installment_plan   InstallmentPlan    @relation(fields: [plan], references: [plan_name])
  registration_forms RegistrationForm[]
  stocks             Stock[]
  associated_brokers Broker[]           @relation("ProjectBrokers")
}

model Property {
  property_id    Int       @id @default(autoincrement())
  customer_id    String?
  property_type  String?
  size           Int
  allotment_date DateTime?
  remark         String?
  measuring_unit String?
  bookings       Booking[]
  customer       Customer? @relation(fields: [customer_id], references: [customer_id])
  stocks         Stock[]
}

model PropertySize {
  size_id        Int    @id @unique
  size_number    Int
  measuring_unit String
}

model RegistrationForm {
  id                        Int       @id @default(autoincrement())
  customer_id               String
  unit_id                   String
  manual_application_number String?   @unique
  booking_receipt_number    String?
  name                      String
  father_name               String?
  grandfather_name          String?
  dob                       DateTime?
  address1                  String
  address2                  String?
  state                     String
  pincode                   String
  country                   String    @default("India")
  email                     String
  phone                     String
  fax                       String?
  std_code                  String?
  tax_ward_no               String?
  dist_no                   String?
  pan_no                    String?   @unique
  aadhar_no                 String?
  gstin                     String?
  agent_name                String?
  nominee_name              String?
  nominee_address           String?
  created_at                DateTime  @default(now())
  project_id                Int
  customer                  Customer  @relation(fields: [customer_id], references: [customer_id])
  project                   Project   @relation(fields: [project_id], references: [project_id])
}

model Stock {
  stock_id       Int       @id @default(autoincrement())
  property_id    Int
  property_type  String?
  size           Int?
  bsp            Float?
  broker_id      Int?
  remarks        String?
  on_hold_status String?
  hold_till_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  project_id     Int
  project        Project   @relation(fields: [project_id], references: [project_id])
  property       Property  @relation(fields: [property_id], references: [property_id])
}

enum Role {
  SUPERADMIN
  ADMIN
  EMPLOYEE
}
